{
	"id": "292df534-d079-4483-8cbc-77f8d278fb26",
	"data": {
		"nodes": [
			{
				"data": {
					"description": "Get chat inputs from the Playground.",
					"display_name": "Chat Input",
					"id": "ChatInput-wHJjj",
					"node": {
						"base_classes": [
							"Message"
						],
						"beta": false,
						"conditional_paths": [

						],
						"custom_fields": {

						},
						"description": "Get chat inputs from the Playground.",
						"display_name": "Chat Input",
						"documentation": "",
						"edited": false,
						"field_order": [
							"input_value",
							"store_message",
							"sender",
							"sender_name",
							"session_id",
							"files"
						],
						"frozen": false,
						"icon": "ChatInput",
						"output_types": [

						],
						"outputs": [
							{
								"cache": true,
								"display_name": "Message",
								"method": "message_response",
								"name": "message",
								"selected": "Message",
								"types": [
									"Message"
								],
								"value": "__UNDEFINED__"
							}
						],
						"pinned": false,
						"template": {
							"_type": "Component",
							"code": {
								"advanced": true,
								"dynamic": true,
								"fileTypes": [

								],
								"file_path": "",
								"info": "",
								"list": false,
								"load_from_db": false,
								"multiline": true,
								"name": "code",
								"password": false,
								"placeholder": "",
								"required": true,
								"show": true,
								"title_case": false,
								"type": "code",
								"value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"
							},
							"files": {
								"advanced": true,
								"display_name": "Files",
								"dynamic": false,
								"fileTypes": [
									"txt",
									"md",
									"mdx",
									"csv",
									"json",
									"yaml",
									"yml",
									"xml",
									"html",
									"htm",
									"pdf",
									"docx",
									"py",
									"sh",
									"sql",
									"js",
									"ts",
									"tsx",
									"jpg",
									"jpeg",
									"png",
									"bmp",
									"image"
								],
								"file_path": "",
								"info": "Files to be sent with the message.",
								"list": true,
								"name": "files",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_metadata": true,
								"type": "file",
								"value": ""
							},
							"input_value": {
								"advanced": false,
								"display_name": "Text",
								"dynamic": false,
								"info": "Message to be passed as input.",
								"input_types": [
									"Message"
								],
								"list": false,
								"load_from_db": false,
								"multiline": true,
								"name": "input_value",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_input": true,
								"trace_as_metadata": true,
								"type": "str",
								"value": ""
							},
							"sender": {
								"advanced": true,
								"display_name": "Sender Type",
								"dynamic": false,
								"info": "Type of sender.",
								"name": "sender",
								"options": [
									"Machine",
									"User"
								],
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_metadata": true,
								"type": "str",
								"value": "User"
							},
							"sender_name": {
								"advanced": true,
								"display_name": "Sender Name",
								"dynamic": false,
								"info": "Name of the sender.",
								"input_types": [
									"Message"
								],
								"list": false,
								"load_from_db": false,
								"name": "sender_name",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_input": true,
								"trace_as_metadata": true,
								"type": "str",
								"value": "User"
							},
							"session_id": {
								"advanced": true,
								"display_name": "Session ID",
								"dynamic": false,
								"info": "Session ID for the message.",
								"input_types": [
									"Message"
								],
								"list": false,
								"load_from_db": false,
								"name": "session_id",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_input": true,
								"trace_as_metadata": true,
								"type": "str",
								"value": ""
							},
							"store_message": {
								"advanced": true,
								"display_name": "Store Messages",
								"dynamic": false,
								"info": "Store the message in the history.",
								"list": false,
								"name": "store_message",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_metadata": true,
								"type": "bool",
								"value": true
							}
						}
					},
					"type": "ChatInput"
				},
				"dragging": false,
				"height": 317,
				"id": "ChatInput-wHJjj",
				"position": {
					"x": -476.09348770506625,
					"y": 1041.8268814798225
				},
				"positionAbsolute": {
					"x": -476.09348770506625,
					"y": 1041.8268814798225
				},
				"selected": false,
				"type": "genericNode",
				"width": 384
			},
			{
				"data": {
					"description": "Create a prompt template with dynamic variables.",
					"display_name": "Prompt",
					"id": "Prompt-OLGmh",
					"node": {
						"template": {
							"_type": "Component",
							"code": {
								"advanced": true,
								"dynamic": true,
								"fileTypes": [

								],
								"file_path": "",
								"info": "",
								"list": false,
								"load_from_db": false,
								"multiline": true,
								"name": "code",
								"password": false,
								"placeholder": "",
								"required": true,
								"show": true,
								"title_case": false,
								"type": "code",
								"value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n"
							},
							"template": {
								"advanced": false,
								"display_name": "Template",
								"dynamic": false,
								"info": "",
								"list": false,
								"load_from_db": false,
								"name": "template",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_input": true,
								"type": "prompt",
								"value": "You are an AI helping a user in resuming Youtube videos for him, so he will decide if should watch it or not. \nAnswer only in Portuguese and format you message in Markdown format.\nYou will recieve the video name and the \nvideo's transcription and need to answer with a paragraph about it.\n\nUse the following format:\n*Vídeo:* [Video name]\n*Canal:* [Video name]\n*Resumo:* [Explaining what this video is about]\n\n\nVideo name: {video_name}\nVideo name: {channel_name}\nVideo Transcript: {user_input}\n\nAnswer (in Portuguese): "
							},
							"user_input": {
								"field_type": "str",
								"required": false,
								"placeholder": "",
								"list": false,
								"show": true,
								"multiline": true,
								"value": "",
								"fileTypes": [

								],
								"file_path": "",
								"password": false,
								"name": "user_input",
								"display_name": "user_input",
								"advanced": false,
								"input_types": [
									"Message",
									"Text"
								],
								"dynamic": false,
								"info": "",
								"load_from_db": false,
								"title_case": false,
								"type": "str"
							},
							"video_name": {
								"field_type": "str",
								"required": false,
								"placeholder": "",
								"list": false,
								"show": true,
								"multiline": true,
								"value": "",
								"fileTypes": [

								],
								"file_path": "",
								"password": false,
								"name": "video_name",
								"display_name": "video_name",
								"advanced": false,
								"input_types": [
									"Message",
									"Text"
								],
								"dynamic": false,
								"info": "",
								"load_from_db": false,
								"title_case": false,
								"type": "str"
							},
							"channel_name": {
								"field_type": "str",
								"required": false,
								"placeholder": "",
								"list": false,
								"show": true,
								"multiline": true,
								"value": "",
								"fileTypes": [

								],
								"file_path": "",
								"password": false,
								"name": "channel_name",
								"display_name": "channel_name",
								"advanced": false,
								"input_types": [
									"Message",
									"Text"
								],
								"dynamic": false,
								"info": "",
								"load_from_db": false,
								"title_case": false,
								"type": "str"
							}
						},
						"description": "Create a prompt template with dynamic variables.",
						"icon": "prompts",
						"is_input": null,
						"is_output": null,
						"is_composition": null,
						"base_classes": [
							"Message"
						],
						"name": "",
						"display_name": "Prompt",
						"documentation": "",
						"custom_fields": {
							"template": [
								"video_name",
								"channel_name",
								"user_input"
							]
						},
						"output_types": [

						],
						"full_path": null,
						"pinned": false,
						"conditional_paths": [

						],
						"frozen": false,
						"outputs": [
							{
								"types": [
									"Message"
								],
								"selected": "Message",
								"name": "prompt",
								"hidden": null,
								"display_name": "Prompt Message",
								"method": "build_prompt",
								"value": "__UNDEFINED__",
								"cache": true
							}
						],
						"field_order": [
							"template"
						],
						"beta": false,
						"error": null,
						"edited": false
					},
					"type": "Prompt"
				},
				"dragging": false,
				"height": 619,
				"id": "Prompt-OLGmh",
				"position": {
					"x": -6.57648899401147,
					"y": 1128.8657325391248
				},
				"positionAbsolute": {
					"x": -6.57648899401147,
					"y": 1128.8657325391248
				},
				"selected": false,
				"type": "genericNode",
				"width": 384
			},
			{
				"data": {
					"description": "Display a chat message in the Playground.",
					"display_name": "Chat Output",
					"id": "ChatOutput-fxhSA",
					"node": {
						"base_classes": [
							"Message"
						],
						"beta": false,
						"conditional_paths": [

						],
						"custom_fields": {

						},
						"description": "Display a chat message in the Playground.",
						"display_name": "Chat Output",
						"documentation": "",
						"edited": false,
						"field_order": [
							"input_value",
							"store_message",
							"sender",
							"sender_name",
							"session_id",
							"data_template"
						],
						"frozen": false,
						"icon": "ChatOutput",
						"output_types": [

						],
						"outputs": [
							{
								"cache": true,
								"display_name": "Message",
								"method": "message_response",
								"name": "message",
								"selected": "Message",
								"types": [
									"Message"
								],
								"value": "__UNDEFINED__"
							}
						],
						"pinned": false,
						"template": {
							"_type": "Component",
							"code": {
								"advanced": true,
								"dynamic": true,
								"fileTypes": [

								],
								"file_path": "",
								"info": "",
								"list": false,
								"load_from_db": false,
								"multiline": true,
								"name": "code",
								"password": false,
								"placeholder": "",
								"required": true,
								"show": true,
								"title_case": false,
								"type": "code",
								"value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"
							},
							"data_template": {
								"advanced": true,
								"display_name": "Data Template",
								"dynamic": false,
								"info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
								"input_types": [
									"Message"
								],
								"list": false,
								"load_from_db": false,
								"name": "data_template",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_input": true,
								"trace_as_metadata": true,
								"type": "str",
								"value": "{text}"
							},
							"input_value": {
								"advanced": false,
								"display_name": "Text",
								"dynamic": false,
								"info": "Message to be passed as output.",
								"input_types": [
									"Message"
								],
								"list": false,
								"load_from_db": false,
								"name": "input_value",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_input": true,
								"trace_as_metadata": true,
								"type": "str",
								"value": ""
							},
							"sender": {
								"advanced": true,
								"display_name": "Sender Type",
								"dynamic": false,
								"info": "Type of sender.",
								"name": "sender",
								"options": [
									"Machine",
									"User"
								],
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_metadata": true,
								"type": "str",
								"value": "Machine"
							},
							"sender_name": {
								"advanced": true,
								"display_name": "Sender Name",
								"dynamic": false,
								"info": "Name of the sender.",
								"input_types": [
									"Message"
								],
								"list": false,
								"load_from_db": false,
								"name": "sender_name",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_input": true,
								"trace_as_metadata": true,
								"type": "str",
								"value": "AI"
							},
							"session_id": {
								"advanced": true,
								"display_name": "Session ID",
								"dynamic": false,
								"info": "Session ID for the message.",
								"input_types": [
									"Message"
								],
								"list": false,
								"load_from_db": false,
								"name": "session_id",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_input": true,
								"trace_as_metadata": true,
								"type": "str",
								"value": ""
							},
							"store_message": {
								"advanced": true,
								"display_name": "Store Messages",
								"dynamic": false,
								"info": "Store the message in the history.",
								"list": false,
								"name": "store_message",
								"placeholder": "",
								"required": false,
								"show": true,
								"title_case": false,
								"trace_as_metadata": true,
								"type": "bool",
								"value": true
							}
						}
					},
					"type": "ChatOutput"
				},
				"dragging": false,
				"height": 317,
				"id": "ChatOutput-fxhSA",
				"position": {
					"x": 1219.477374823274,
					"y": 1200.950216973985
				},
				"positionAbsolute": {
					"x": 1219.477374823274,
					"y": 1200.950216973985
				},
				"selected": false,
				"type": "genericNode",
				"width": 384
			},
			{
				"id": "GroqModel-aj41X",
				"type": "genericNode",
				"position": {
					"x": 557.8984185391389,
					"y": 919.4818719114546
				},
				"data": {
					"type": "GroqModel",
					"node": {
						"template": {
							"_type": "Component",
							"code": {
								"type": "code",
								"required": true,
								"placeholder": "",
								"list": false,
								"show": true,
								"multiline": true,
								"value": "import requests\nfrom typing import List\nfrom langchain_groq import ChatGroq\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass GroqModel(LCModelComponent):\n    display_name: str = \"Groq\"\n    description: str = \"Generate text using Groq.\"\n    icon = \"Groq\"\n    name = \"GroqModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        SecretStrInput(\n            name=\"groq_api_key\",\n            display_name=\"Groq API Key\",\n            info=\"API key for the Groq API.\",\n        ),\n        MessageTextInput(\n            name=\"groq_api_base\",\n            display_name=\"Groq API Base\",\n            info=\"Base URL path for API requests, leave blank if not using a proxy or service emulator.\",\n            advanced=True,\n            value=\"https://api.groq.com\",\n        ),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Output Tokens\",\n            info=\"The maximum number of tokens to generate.\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            info=\"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            value=0.1,\n        ),\n        IntInput(\n            name=\"n\",\n            display_name=\"N\",\n            info=\"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"The name of the model to use.\",\n            options=[],\n            refresh_button=True,\n        ),\n    ]\n\n    def get_models(self) -> List[str]:\n        api_key = self.groq_api_key\n        base_url = self.groq_api_base or \"https://api.groq.com\"\n        url = f\"{base_url}/openai/v1/models\"\n\n        headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}\n\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            model_list = response.json()\n            return [model[\"id\"] for model in model_list.get(\"data\", [])]\n        except requests.RequestException as e:\n            self.status = f\"Error fetching models: {str(e)}\"\n            return []\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None):\n        if field_name == \"groq_api_key\" or field_name == \"groq_api_base\" or field_name == \"model_name\":\n            models = self.get_models()\n            build_config[\"model_name\"][\"options\"] = models\n        return build_config\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        groq_api_key = self.groq_api_key\n        model_name = self.model_name\n        max_tokens = self.max_tokens\n        temperature = self.temperature\n        groq_api_base = self.groq_api_base\n        n = self.n\n        stream = self.stream\n\n        output = ChatGroq(  # type: ignore\n            model=model_name,\n            max_tokens=max_tokens or None,\n            temperature=temperature,\n            base_url=groq_api_base,\n            n=n or 1,\n            api_key=SecretStr(groq_api_key),\n            streaming=stream,\n        )\n\n        return output  # type: ignore\n",
								"fileTypes": [

								],
								"file_path": "",
								"password": false,
								"name": "code",
								"advanced": true,
								"dynamic": true,
								"info": "",
								"load_from_db": false,
								"title_case": false
							},
							"groq_api_base": {
								"trace_as_input": true,
								"trace_as_metadata": true,
								"load_from_db": false,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "https://api.groq.com",
								"name": "groq_api_base",
								"display_name": "Groq API Base",
								"advanced": true,
								"input_types": [
									"Message"
								],
								"dynamic": false,
								"info": "Base URL path for API requests, leave blank if not using a proxy or service emulator.",
								"title_case": false,
								"type": "str",
								"_input_type": "MessageTextInput"
							},
							"groq_api_key": {
								"load_from_db": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "groq_api_key",
								"display_name": "Groq API Key",
								"advanced": false,
								"input_types": [

								],
								"dynamic": false,
								"info": "API key for the Groq API.",
								"title_case": false,
								"password": true,
								"type": "str",
								"_input_type": "SecretStrInput"
							},
							"input_value": {
								"trace_as_input": true,
								"trace_as_metadata": true,
								"load_from_db": false,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "input_value",
								"display_name": "Input",
								"advanced": false,
								"input_types": [
									"Message"
								],
								"dynamic": false,
								"info": "",
								"title_case": false,
								"type": "str",
								"_input_type": "MessageInput"
							},
							"max_tokens": {
								"trace_as_metadata": true,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "max_tokens",
								"display_name": "Max Output Tokens",
								"advanced": true,
								"dynamic": false,
								"info": "The maximum number of tokens to generate.",
								"title_case": false,
								"type": "int",
								"_input_type": "IntInput"
							},
							"model_name": {
								"trace_as_metadata": true,
								"options": [
									"gemma2-9b-it",
									"gemma-7b-it",
									"llama-3.1-70b-versatile",
									"llama-3.1-8b-instant",
									"llama3-70b-8192",
									"llama3-8b-8192",
									"llama3-groq-70b-8192-tool-use-preview",
									"llama3-groq-8b-8192-tool-use-preview",
									"llama-guard-3-8b",
									"mixtral-8x7b-32768",
									"whisper-large-v3"
								],
								"combobox": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "llama-3.1-8b-instant",
								"name": "model_name",
								"display_name": "Model",
								"advanced": false,
								"dynamic": false,
								"info": "The name of the model to use.",
								"refresh_button": true,
								"title_case": false,
								"type": "str",
								"_input_type": "DropdownInput"
							},
							"n": {
								"trace_as_metadata": true,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "n",
								"display_name": "N",
								"advanced": true,
								"dynamic": false,
								"info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
								"title_case": false,
								"type": "int",
								"_input_type": "IntInput"
							},
							"stream": {
								"trace_as_metadata": true,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": false,
								"name": "stream",
								"display_name": "Stream",
								"advanced": true,
								"dynamic": false,
								"info": "Stream the response from the model. Streaming works only in Chat.",
								"title_case": false,
								"type": "bool",
								"_input_type": "BoolInput"
							},
							"system_message": {
								"trace_as_input": true,
								"trace_as_metadata": true,
								"load_from_db": false,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "system_message",
								"display_name": "System Message",
								"advanced": true,
								"input_types": [
									"Message"
								],
								"dynamic": false,
								"info": "System message to pass to the model.",
								"title_case": false,
								"type": "str",
								"_input_type": "MessageTextInput"
							},
							"temperature": {
								"trace_as_metadata": true,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": 0.1,
								"name": "temperature",
								"display_name": "Temperature",
								"advanced": false,
								"dynamic": false,
								"info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].",
								"title_case": false,
								"type": "float",
								"_input_type": "FloatInput"
							}
						},
						"description": "Generate text using Groq.",
						"icon": "Groq",
						"base_classes": [
							"LanguageModel",
							"Message"
						],
						"display_name": "Groq",
						"documentation": "",
						"custom_fields": {

						},
						"output_types": [

						],
						"pinned": false,
						"conditional_paths": [

						],
						"frozen": false,
						"outputs": [
							{
								"types": [
									"Message"
								],
								"selected": "Message",
								"name": "text_output",
								"display_name": "Text",
								"method": "text_response",
								"value": "__UNDEFINED__",
								"cache": true
							},
							{
								"types": [
									"LanguageModel"
								],
								"selected": "LanguageModel",
								"name": "model_output",
								"display_name": "Language Model",
								"method": "build_model",
								"value": "__UNDEFINED__",
								"cache": true,
								"hidden": true
							}
						],
						"field_order": [
							"input_value",
							"system_message",
							"stream",
							"groq_api_key",
							"groq_api_base",
							"max_tokens",
							"temperature",
							"n",
							"model_name"
						],
						"beta": false,
						"edited": false
					},
					"id": "GroqModel-aj41X"
				},
				"selected": false,
				"width": 384,
				"height": 599,
				"positionAbsolute": {
					"x": 557.8984185391389,
					"y": 919.4818719114546
				},
				"dragging": false
			},
			{
				"id": "TextInput-lngfO",
				"type": "genericNode",
				"position": {
					"x": -598.8534391375216,
					"y": 1833.2878248980257
				},
				"data": {
					"type": "TextInput",
					"node": {
						"template": {
							"_type": "Component",
							"code": {
								"type": "code",
								"required": true,
								"placeholder": "",
								"list": false,
								"show": true,
								"multiline": true,
								"value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
								"fileTypes": [

								],
								"file_path": "",
								"password": false,
								"name": "code",
								"advanced": true,
								"dynamic": true,
								"info": "",
								"load_from_db": false,
								"title_case": false
							},
							"input_value": {
								"trace_as_input": true,
								"trace_as_metadata": true,
								"load_from_db": false,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "input_value",
								"display_name": "Text",
								"advanced": false,
								"input_types": [
									"Message"
								],
								"dynamic": false,
								"info": "Text to be passed as input.",
								"title_case": false,
								"type": "str",
								"_input_type": "MessageTextInput"
							}
						},
						"description": "Get text inputs from the Playground.",
						"icon": "type",
						"base_classes": [
							"Message"
						],
						"display_name": "Video",
						"documentation": "",
						"custom_fields": {

						},
						"output_types": [

						],
						"pinned": false,
						"conditional_paths": [

						],
						"frozen": false,
						"outputs": [
							{
								"types": [
									"Message"
								],
								"selected": "Message",
								"name": "text",
								"display_name": "Text",
								"method": "text_response",
								"value": "__UNDEFINED__",
								"cache": true
							}
						],
						"field_order": [
							"input_value"
						],
						"beta": false,
						"edited": false
					},
					"id": "TextInput-lngfO"
				},
				"selected": false,
				"width": 384,
				"height": 317,
				"positionAbsolute": {
					"x": -598.8534391375216,
					"y": 1833.2878248980257
				},
				"dragging": false
			},
			{
				"id": "OpenAIModel-Q4AFX",
				"type": "genericNode",
				"position": {
					"x": 548.7536900281256,
					"y": 1636.909757868688
				},
				"data": {
					"type": "OpenAIModel",
					"node": {
						"template": {
							"_type": "Component",
							"api_key": {
								"load_from_db": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "api_key",
								"display_name": "OpenAI API Key",
								"advanced": false,
								"input_types": [

								],
								"dynamic": false,
								"info": "The OpenAI API Key to use for the OpenAI model.",
								"title_case": false,
								"password": true,
								"type": "str",
								"_input_type": "SecretStrInput"
							},
							"code": {
								"type": "code",
								"required": true,
								"placeholder": "",
								"list": false,
								"show": true,
								"multiline": true,
								"value": "import operator\nfrom functools import reduce\n\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
								"fileTypes": [

								],
								"file_path": "",
								"password": false,
								"name": "code",
								"advanced": true,
								"dynamic": true,
								"info": "",
								"load_from_db": false,
								"title_case": false
							},
							"input_value": {
								"trace_as_input": true,
								"trace_as_metadata": true,
								"load_from_db": false,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "input_value",
								"display_name": "Input",
								"advanced": false,
								"input_types": [
									"Message"
								],
								"dynamic": false,
								"info": "",
								"title_case": false,
								"type": "str",
								"_input_type": "MessageInput"
							},
							"json_mode": {
								"trace_as_metadata": true,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": false,
								"name": "json_mode",
								"display_name": "JSON Mode",
								"advanced": true,
								"dynamic": false,
								"info": "If True, it will output JSON regardless of passing a schema.",
								"title_case": false,
								"type": "bool",
								"_input_type": "BoolInput"
							},
							"max_tokens": {
								"trace_as_metadata": true,
								"range_spec": {
									"step_type": "float",
									"min": 0,
									"max": 128000,
									"step": 0.1
								},
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "max_tokens",
								"display_name": "Max Tokens",
								"advanced": true,
								"dynamic": false,
								"info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
								"title_case": false,
								"type": "int",
								"_input_type": "IntInput"
							},
							"model_kwargs": {
								"trace_as_input": true,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": {

								},
								"name": "model_kwargs",
								"display_name": "Model Kwargs",
								"advanced": true,
								"dynamic": false,
								"info": "",
								"title_case": false,
								"type": "dict",
								"_input_type": "DictInput"
							},
							"model_name": {
								"trace_as_metadata": true,
								"options": [
									"gpt-4o-mini",
									"gpt-4o",
									"gpt-4-turbo",
									"gpt-4-turbo-preview",
									"gpt-4",
									"gpt-3.5-turbo",
									"gpt-3.5-turbo-0125"
								],
								"combobox": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "gpt-4o-mini",
								"name": "model_name",
								"display_name": "Model Name",
								"advanced": false,
								"dynamic": false,
								"info": "",
								"title_case": false,
								"type": "str",
								"_input_type": "DropdownInput"
							},
							"openai_api_base": {
								"trace_as_metadata": true,
								"load_from_db": false,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "openai_api_base",
								"display_name": "OpenAI API Base",
								"advanced": true,
								"dynamic": false,
								"info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
								"title_case": false,
								"type": "str",
								"_input_type": "StrInput"
							},
							"output_schema": {
								"trace_as_input": true,
								"list": true,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": {

								},
								"name": "output_schema",
								"display_name": "Schema",
								"advanced": true,
								"dynamic": false,
								"info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
								"title_case": false,
								"type": "dict",
								"_input_type": "DictInput"
							},
							"seed": {
								"trace_as_metadata": true,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": 1,
								"name": "seed",
								"display_name": "Seed",
								"advanced": true,
								"dynamic": false,
								"info": "The seed controls the reproducibility of the job.",
								"title_case": false,
								"type": "int",
								"_input_type": "IntInput"
							},
							"stream": {
								"trace_as_metadata": true,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": false,
								"name": "stream",
								"display_name": "Stream",
								"advanced": true,
								"dynamic": false,
								"info": "Stream the response from the model. Streaming works only in Chat.",
								"title_case": false,
								"type": "bool",
								"_input_type": "BoolInput"
							},
							"system_message": {
								"trace_as_input": true,
								"trace_as_metadata": true,
								"load_from_db": false,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "system_message",
								"display_name": "System Message",
								"advanced": true,
								"input_types": [
									"Message"
								],
								"dynamic": false,
								"info": "System message to pass to the model.",
								"title_case": false,
								"type": "str",
								"_input_type": "MessageTextInput"
							},
							"temperature": {
								"trace_as_metadata": true,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": 0.1,
								"name": "temperature",
								"display_name": "Temperature",
								"advanced": false,
								"dynamic": false,
								"info": "",
								"title_case": false,
								"type": "float",
								"_input_type": "FloatInput"
							}
						},
						"description": "Generates text using OpenAI LLMs.",
						"icon": "OpenAI",
						"base_classes": [
							"LanguageModel",
							"Message"
						],
						"display_name": "OpenAI",
						"documentation": "",
						"custom_fields": {

						},
						"output_types": [

						],
						"pinned": false,
						"conditional_paths": [

						],
						"frozen": false,
						"outputs": [
							{
								"types": [
									"Message"
								],
								"selected": "Message",
								"name": "text_output",
								"display_name": "Text",
								"method": "text_response",
								"value": "__UNDEFINED__",
								"cache": true
							},
							{
								"types": [
									"LanguageModel"
								],
								"selected": "LanguageModel",
								"name": "model_output",
								"display_name": "Language Model",
								"method": "build_model",
								"value": "__UNDEFINED__",
								"cache": true
							}
						],
						"field_order": [
							"input_value",
							"system_message",
							"stream",
							"max_tokens",
							"model_kwargs",
							"json_mode",
							"output_schema",
							"model_name",
							"openai_api_base",
							"api_key",
							"temperature",
							"seed"
						],
						"beta": false,
						"edited": false
					},
					"id": "OpenAIModel-Q4AFX"
				},
				"selected": false,
				"width": 384,
				"height": 639,
				"positionAbsolute": {
					"x": 548.7536900281256,
					"y": 1636.909757868688
				},
				"dragging": true
			},
			{
				"id": "TextInput-D563R",
				"type": "genericNode",
				"position": {
					"x": -605.8638003978274,
					"y": 1432.5119640013552
				},
				"data": {
					"type": "TextInput",
					"node": {
						"template": {
							"_type": "Component",
							"code": {
								"type": "code",
								"required": true,
								"placeholder": "",
								"list": false,
								"show": true,
								"multiline": true,
								"value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n",
								"fileTypes": [

								],
								"file_path": "",
								"password": false,
								"name": "code",
								"advanced": true,
								"dynamic": true,
								"info": "",
								"load_from_db": false,
								"title_case": false
							},
							"input_value": {
								"trace_as_input": true,
								"trace_as_metadata": true,
								"load_from_db": false,
								"list": false,
								"required": false,
								"placeholder": "",
								"show": true,
								"value": "",
								"name": "input_value",
								"display_name": "Text",
								"advanced": false,
								"input_types": [
									"Message"
								],
								"dynamic": false,
								"info": "Text to be passed as input.",
								"title_case": false,
								"type": "str",
								"_input_type": "MessageTextInput"
							}
						},
						"description": "Get text inputs from the Playground.",
						"icon": "type",
						"base_classes": [
							"Message"
						],
						"display_name": "Channel",
						"documentation": "",
						"custom_fields": {

						},
						"output_types": [

						],
						"pinned": false,
						"conditional_paths": [

						],
						"frozen": false,
						"outputs": [
							{
								"types": [
									"Message"
								],
								"selected": "Message",
								"name": "text",
								"display_name": "Text",
								"method": "text_response",
								"value": "__UNDEFINED__",
								"cache": true
							}
						],
						"field_order": [
							"input_value"
						],
						"beta": false,
						"edited": false
					},
					"id": "TextInput-D563R"
				},
				"selected": true,
				"width": 384,
				"height": 317,
				"positionAbsolute": {
					"x": -605.8638003978274,
					"y": 1432.5119640013552
				},
				"dragging": false
			}
		],
		"edges": [
			{
				"className": "",
				"data": {
					"sourceHandle": {
						"dataType": "ChatInput",
						"id": "ChatInput-wHJjj",
						"name": "message",
						"output_types": [
							"Message"
						]
					},
					"targetHandle": {
						"fieldName": "user_input",
						"id": "Prompt-OLGmh",
						"inputTypes": [
							"Message",
							"Text"
						],
						"type": "str"
					}
				},
				"id": "reactflow__edge-ChatInput-wHJjj{œdataTypeœ:œChatInputœ,œidœ:œChatInput-wHJjjœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-OLGmh{œfieldNameœ:œuser_inputœ,œidœ:œPrompt-OLGmhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
				"source": "ChatInput-wHJjj",
				"sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-wHJjjœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
				"target": "Prompt-OLGmh",
				"targetHandle": "{œfieldNameœ:œuser_inputœ,œidœ:œPrompt-OLGmhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
			},
			{
				"source": "TextInput-lngfO",
				"sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-lngfOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
				"target": "Prompt-OLGmh",
				"targetHandle": "{œfieldNameœ:œvideo_nameœ,œidœ:œPrompt-OLGmhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
				"data": {
					"targetHandle": {
						"fieldName": "video_name",
						"id": "Prompt-OLGmh",
						"inputTypes": [
							"Message",
							"Text"
						],
						"type": "str"
					},
					"sourceHandle": {
						"dataType": "TextInput",
						"id": "TextInput-lngfO",
						"name": "text",
						"output_types": [
							"Message"
						]
					}
				},
				"id": "reactflow__edge-TextInput-lngfO{œdataTypeœ:œTextInputœ,œidœ:œTextInput-lngfOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OLGmh{œfieldNameœ:œvideo_nameœ,œidœ:œPrompt-OLGmhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
				"className": ""
			},
			{
				"source": "Prompt-OLGmh",
				"sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-OLGmhœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
				"target": "OpenAIModel-Q4AFX",
				"targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-Q4AFXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
				"data": {
					"targetHandle": {
						"fieldName": "input_value",
						"id": "OpenAIModel-Q4AFX",
						"inputTypes": [
							"Message"
						],
						"type": "str"
					},
					"sourceHandle": {
						"dataType": "Prompt",
						"id": "Prompt-OLGmh",
						"name": "prompt",
						"output_types": [
							"Message"
						]
					}
				},
				"id": "reactflow__edge-Prompt-OLGmh{œdataTypeœ:œPromptœ,œidœ:œPrompt-OLGmhœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-Q4AFX{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-Q4AFXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
				"className": ""
			},
			{
				"source": "Prompt-OLGmh",
				"sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-OLGmhœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
				"target": "GroqModel-aj41X",
				"targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-aj41Xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
				"data": {
					"targetHandle": {
						"fieldName": "input_value",
						"id": "GroqModel-aj41X",
						"inputTypes": [
							"Message"
						],
						"type": "str"
					},
					"sourceHandle": {
						"dataType": "Prompt",
						"id": "Prompt-OLGmh",
						"name": "prompt",
						"output_types": [
							"Message"
						]
					}
				},
				"id": "reactflow__edge-Prompt-OLGmh{œdataTypeœ:œPromptœ,œidœ:œPrompt-OLGmhœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-GroqModel-aj41X{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-aj41Xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
				"className": ""
			},
			{
				"source": "GroqModel-aj41X",
				"sourceHandle": "{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-aj41Xœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
				"target": "ChatOutput-fxhSA",
				"targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fxhSAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
				"data": {
					"targetHandle": {
						"fieldName": "input_value",
						"id": "ChatOutput-fxhSA",
						"inputTypes": [
							"Message"
						],
						"type": "str"
					},
					"sourceHandle": {
						"dataType": "GroqModel",
						"id": "GroqModel-aj41X",
						"name": "text_output",
						"output_types": [
							"Message"
						]
					}
				},
				"id": "reactflow__edge-GroqModel-aj41X{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-aj41Xœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-fxhSA{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fxhSAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
				"className": ""
			},
			{
				"source": "TextInput-D563R",
				"sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-D563Rœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
				"target": "Prompt-OLGmh",
				"targetHandle": "{œfieldNameœ:œchannel_nameœ,œidœ:œPrompt-OLGmhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
				"data": {
					"targetHandle": {
						"fieldName": "channel_name",
						"id": "Prompt-OLGmh",
						"inputTypes": [
							"Message",
							"Text"
						],
						"type": "str"
					},
					"sourceHandle": {
						"dataType": "TextInput",
						"id": "TextInput-D563R",
						"name": "text",
						"output_types": [
							"Message"
						]
					}
				},
				"id": "reactflow__edge-TextInput-D563R{œdataTypeœ:œTextInputœ,œidœ:œTextInput-D563Rœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OLGmh{œfieldNameœ:œchannel_nameœ,œidœ:œPrompt-OLGmhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
				"className": ""
			}
		],
		"viewport": {
			"x": 518.4578577354224,
			"y": -432.8912672505742,
			"zoom": 0.5493331637295097
		}
	},
	"description": "This flow will get you experimenting with the basics of the UI, the Chat and the Prompt component. \n\nTry changing the Template in it to see how the model behaves. \nYou can change it to this and a Text Input into the `type_of_person` variable : \"Answer the user as if you were a pirate.\n\nUser: {user_input}\n\nAnswer: \" ",
	"name": "Youtube Resumer",
	"last_tested_version": "1.0.14",
	"endpoint_name": null,
	"is_component": false
}
